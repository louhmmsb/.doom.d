#+TITLE: Doom Emacs Configuration
#+AUTHOR: Lourenço Henrique Moinheiro Martins Sborz Bogo
#+PROPERTY: header-args :tangle yes

* User
Always good to have some kind of information about the user.
#+begin_src emacs-lisp
(setq user-full-name "Lourenço Bogo"
      user-mail-address "louhmmsb@hotmail.com")
#+end_src
* Visuals
** Theme
Setting the theme up, to see which themes are available you can 'SPC h t'
#+begin_src emacs-lisp
(setq Monokai 'doom-monokai-classic)
(setq GruvBoxDark 'doom-gruvbox)
(setq HorizonDark 'doom-horizon)
(setq OneDark 'doom-one)
(setq Nord 'doom-nord)
(setq doom-theme Nord)
#+end_src
** Font
There are 5 variables that are related to foonts in Doom Emacs:
- 'doom-font' -- standard monospace font used for most things
- 'doom-variable-pitch-font' -- used for some plugins, it's the not monospaced font (in theory)
- 'doom-big-font' -- used in big font mode, good for presentations
- 'fontlock-comment-face' -- used for comments
- 'font-lock-keyword-face' -- used for keywords with special significance, such as 'for' and 'if' in C mode

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 15 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "JetBrains Mono" :size 15)
      doom-big-font (font-spec :family "JetBrains Mono" :size 24 :weight 'semi-light))
(after! doom-themes
  (setq doom-themes-enable-bold t)
  (setq doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src
** Line Numbers
Relative numbers are always nice, you can jump to where you want perfectly
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src
** Screen
Making emacs go fullscreen when opened
#+begin_src emacs-lisp :tangle no
(if (eq initial-window-system 'x) ;if started by emacs command or desktop
    (progn (toggle-frame-maximized) (toggle-frame-fullscreen))
  (toggle-frame-fullscreen))
#+end_src
** Banner
- Functions to change the emacs banner to a random ascii art.
- The art will be chosen from '~/.doom.d/extra/emacsText'
#+begin_src emacs-lisp
(defun +banner/emacsSplash ()
  (split-string (with-output-to-string
                  (call-process "~/.doom.d/extra/emacsSplashAux" nil standard-output nil))
                "\n" t))

(defun +banner/doom-banner ()
  (let ((point (point)))
    (mapc (lambda (line)
            (insert (propertize (+doom-dashboard--center +doom-dashboard--width line)
                                'face 'doom-dashboard-banner) " ")
            (insert "\n"))
          (+banner/emacsSplash))
    (insert (make-string (or (cdr +doom-dashboard-banner-padding) 0) ?\n))))

(setcar (nthcdr 0 +doom-dashboard-functions) #'+banner/doom-banner)
;;(setq fancy-splash-image "~/Documents/Configs/NEOFETCH/slime.jpg")
#+end_src
** Transparency
#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(90 . 50))
(add-to-list 'default-frame-alist '(alpha . (90 . 50)))
#+end_src
* Languages (Including Org)
** Org-Mode
- Adding a org-bullets-mode to org-mode hook
- Setting org directory
- Making org-mode not show the markers of markdown text
- Making org-mode set a timestamp to when some task was done
#+begin_src emacs-lisp
(use-package! org-bullets
  :hook (org-mode . org-bullets-mode))
(after! org
  (setq org-directory "~/org"
        org-hide-emphasis-markers t
        org-log-done 'time
        org-todo-keywords '((sequence "TODO(t)" "INPROGRESS(i)" "NOT SENT(n)" "|" "DONE(d)"))
        org-todo-keyword-faces
        '(("INPROGRESS" :foreground "dodger blue" :weight bold :underline f) ("NOT SENT" :foreground "medium purple" :weight bold :underline f))))
#+end_src

** LaTeX-Mode
- setting the default pdf viewer for latex to evince
  #+begin_src emacs-lisp
(setq +latex-viewers '(zathura))
  #+end_src
** Racket-Mode
- The function 'racket-smart-open-bracket-mode' makes putting brackets in racket mode really hard, so I like it disabled
#+begin_src emacs-lisp
(after! racket-mode
  (remove-hook! 'racket-mode-hook #'(racket-smart-open-bracket-mode)))
#+end_src
* Minor Modes
- Enabling word wrap almost everywhere (more info [[https://github.com/hlissner/doom-emacs/blob/develop/modules/editor/word-wrap/README.org][here]])
#+begin_src emacs-lisp
(+global-word-wrap-mode +1)
#+end_src
* Variables
- 'require-final-newline' puts a newline at the end of every file, which is annoying in snippets
#+begin_src emacs-lisp
(setq mode-require-final-newline nil
      require-final-newline nil
      browse-url-browser-function 'browse-url-firefox
      browse-url-new-window-flag  t
      browse-url-firefox-new-window-is-tab nil)
#+end_src

* Minted
Setting up minted to export syntax highlighted code from org to latex
- 'org-latex-packages-alist' describes which packages should be imported in the latex document
- Setting 'org-latex-listings' to minted, is making every listing use minted when the code gets exported
- The option '-shell-escape' is needed to make the minted work when the tex gets compiled to pdf

#+begin_src emacs-lisp
(after! org
  (setq org-latex-packages-alist '(("" "minted")))
  (setq org-latex-listings 'minted)
  (setq org-latex-pdf-process
        '("pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"
          "bibtex %b"
          "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"
          "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f")))
#+end_src

* Stop Making Auto-saves and Backups
The variables names here are self explanatory
#+begin_src emacs-lisp
(setq auto-save-default nil
      create-lockfiles nil
      make-backup-files nil)
#+end_src
* Keybindings
- TeX-command-run-all is a function that compiles a TeX file and opens the .pdf after
  #+begin_src emacs-lisp
(map! (:leader
       (:prefix "s"
         :desc "Find on theonenote" "o" #'find-on-theonenote)
       (:map projectile-mode-map
        (:prefix ("p")
         :desc "Purge file from project" "P" #'projectile-purge-file-from-cache)
        (:prefix ("g")
         :desc "Magit push" "p" #'magit-push
         :desc "Magit stage all files" "a" #'magit-stage-modified)
        (:prefix ("W" . "wrap")
         :desc "()" "(" #'sp-wrap-round
         :desc "{}" "{" #'sp-wrap-curly
         :desc "[]" "[" #'sp-wrap-square)))
      (:localleader
       (:map (latex-mode-map LaTeX-mode-map)
        (:prefix ("c" . "code")
         :desc "Compile and show PDF" "c" #'TeX-command-run-all)
        (:prefix ("i" . "insert")
         :desc "Insert LaTeX environment" "e" #'LaTeX-environment
         :desc "Insert LaTeX item" "i" #'LaTeX-insert-item))
       (:map (haskell-mode-map)
        :desc "Refactor at point" "r" #'hlint-refactor-refactor-at-point
        :desc "Refactor buffer" "R" #'hlint-refactor-refactor-buffer)))
  #+end_src

* Functions
#+begin_src emacs-lisp
(defun find-on-theonenote ()
    "Searches for stuff on theonenote."
    (interactive)
    (view-file (concat org-directory "/theonenote.org"))
    (evil-ex-search-forward))
#+end_src
* Next packages to configure
- Treemacs: [[https://github.com/Alexander-Miller/treemacs][here]]
- Smartparens: [[https://github.com/Fuco1/smartparens#usage][here]]
