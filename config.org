#+TITLE: Doom Emacs Configuration
#+AUTHOR: Lourenço Henrique Moinheiro Martins Sborz Bogo
#+PROPERTY: header-args :tangle yes

* User
Always good to have some kind of information about the user.
#+begin_src emacs-lisp
(setq user-full-name "Lourenço Bogo"
      user-mail-address "louhmmsb@hotmail.com")
#+end_src
* UI
** Theme
#+begin_src emacs-lisp
(use-package! catppuccin-theme
  :config
  (setq catppuccin-height-title1 1.5))
  ;;(load-theme 'catppuccin t))
(load-theme 'doom-one t)
#+end_src
** Font
- "doom-font" refers to the standard monospace font used for most things.
- "doom-variable-pitch-font" refers to the not monospaced font (in theory) used by some packages.
- "doom-big-font" refers to the font used in big-font-mode
- "font-lock-comment-face" refers to the transformation the font goes through in comments
- "font-lock-keyword-face" refers to the transformation the font goes through in keywords
#+begin_src emacs-lisp
(setq monospaced-font-family "JetBrains Mono")
(setq variable-font-family "JetBrains Mono")
(setq doom-font (font-spec :family monospaced-font-family :size 15 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family variable-font-family :size 15)
      doom-big-font (font-spec :family monospaced-font-family :size 24 :weight 'semi-light))
(after! doom-themes
  (setq doom-themes-enable-bold t)
  (setq doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src
** Line Numbers
Making the line numbers relative.
#+begin_src emacs-lisp
(global-display-line-numbers-mode)
;; (column-number-mode)
(setq display-line-numbers-type 'relative)
;; disabling it on some types of files
(dolist (mode '(term-mode-hook
                 eshell-mode-hook
                 org-mode-hook
                 vterm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** Screen
This makes emacs go fullscreen when opened.
#+begin_src emacs-lisp :tangle no
(if (eq initial-window-system 'x) ;if started by emacs command or desktop
    (progn (toggle-frame-maximized) (toggle-frame-fullscreen))
  (toggle-frame-fullscreen))
#+end_src

This is a /temporary/ fix to emacs not going fullscreen on Windows when using WSL. The values of the resolution are hardcoded and should be changed if the resolution of the monitor changes. The left position is set to 1366, because that's the resolution of my left monitor, and I use Emacs on the right monitor.
#+begin_src emacs-lisp
(defun emacs-windows-fullscreen-mode-2560x1080 ()
  "Make Emacs go fullscreen when using wsl2 inside windows.
INTERACTIVE"
  (interactive)
  (set-frame-parameter (selected-frame) 'left 1366)
  (set-frame-parameter (selected-frame) 'top 0)
  (set-frame-parameter (selected-frame) 'undecorated t)
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (set-frame-size (selected-frame) 2544 1080 t)
  )
#+end_src
** Doom Splash Banner
- Auxiliary functions to change the emacs banner to a random ascii art.
- The ascii art will be chosen from '~/.doom.d/extra/emacsText' directory.
#+begin_src emacs-lisp
;; (defun +banner/emacsSplash ()
;;   (split-string (with-output-to-string
;;                   (call-process "~/.doom.d/extra/emacsSplashAux" nil standard-output nil))
;;                 "\n" t))

;; (defun +banner/doom-banner ()
;;   (let ((point (point)))
;;     (mapc (lambda (line)
;;             (insert (propertize (+doom-dashboard--center +doom-dashboard--width line)
;;                                 'face 'doom-dashboard-banner) " ")
;;             (insert "\n"))
;;           (+banner/emacsSplash))
;;     (insert (make-string (or (cdr +doom-dashboard-banner-padding) 0) ?\n))))

;; (setcar (nthcdr 0 +doom-dashboard-functions) #'+banner/doom-banner)
#+end_src
* Setting Variables
#+begin_src emacs-lisp
(setq require-final-newline nil
      browse-url-browser-function 'browse-url-firefox
      browse-url-new-window-flag  t
      browse-url-firefox-new-window-is-tab nil)
#+end_src

* QOL
** Smex
#+begin_src emacs-lisp
(use-package! smex
  :config
  (smex-initialize))
#+end_src
* Languages (Including org)
** Org Mode
#+begin_src emacs-lisp
(use-package! org
  :config
  (setq org-ellipsis " ▾")
  :hook
  (org-mode . +zen/toggle))

(use-package! org-roam
  :init
  (setq org-roam-directory "~/Notes"))
#+end_src
* Org Agenda
Configuration for org agenda, strongly /inspired/ by the one made [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][here]].
#+begin_src emacs-lisp
(setq org-agenda-files '("~/org/inbox.org"
                         "~/org/gtd.org"
                         "~/org/tickler.org"))

(setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "REVIEW(r)" "|" "DONE(d)" "CANCELLED(c)")))

(setq org-capture-templates '(("t" "Todo [inbox]" entry
                               (file+headline "~/org/inbox.org" "Tasks")
                               "* TODO %i%?")
                              ("T" "Tickler" entry
                               (file+headline "~/org/tickler.org" "Tickler")
                               "* %i%? \n %t")))

(setq org-refile-targets '(("~/org/gtd.org" :maxlevel . 3)
                           ("~/org/someday.org" :level . 1)
                           ("~/org/tickler.org" :maxlevel . 2)))

(setq org-log-done 'time)
#+end_src
* Bindings
** Generic Bindings
#+begin_src emacs-lisp
(map! :nv "j" #'evil-next-visual-line
      :nv "k" #'evil-previous-visual-line
      :map ibuffer-mode-map
      :nvi "q" #'kill-current-buffer)
#+end_src

** Ivy
#+begin_src emacs-lisp
;; (map! "C-s" #'swiper
;;       :map ivy-minibuffer-map
;;       "TAB" #'ivy-alt-done
;;       "C-l" #'ivy-alt-done
;;       "C-j" #'ivy-next-line
;;       "C-k" #'ivy-previous-line
;;       :map ivy-switch-buffer-map
;;       "C-k" #'ivy-previous-line
;;       "C-l" #'ivy-done
;;       "C-d" #'ivy-switch-buffer-kill
;;       :map ivy-reverse-i-search-map
;;       "C-k" #'ivy-previous-line
;;       "C-d" #'ivy-reverse-i-search-kill)

;; (map! ("M-x"     #'counsel-M-x)
;;       ("C-x b"   #'counsel-ibuffer)
;;       ("C-x C-f" #'counsel-find-file)
;;       :map minibuffer-local-map
;;       ("C-r"     #'counsel-minibuffer-history))

;; (map! (:leader
;;        (:prefix "b"
;;         :desc "Switch buffer" "b" #'counsel-switch-buffer)))
#+end_src

** Vertico
#+begin_src emacs-lisp
(map! ("C-s" #'consult-line)
      :map vertico-map
      ("M-o" #'embark-act))
#+end_src
