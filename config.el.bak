(setq user-full-name "Louren√ßo Bogo"
      user-mail-address "louhmmsb@hotmail.com")

(setq Monokai 'doom-monokai-classic)
(setq GruvBoxDark 'doom-gruvbox)
(setq HorizonDark 'doom-horizon)
(setq OneDark 'doom-one)
(setq doom-theme HorizonDark)

(setq doom-font (font-spec :family "JetBrains Mono" :size 15 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "JetBrains Mono" :size 15)
      doom-big-font (font-spec :family "JetBrains Mono" :size 24 :weight 'semi-light))
(after! doom-themes
  (setq doom-themes-enable-bold t)
  (setq doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

(setq display-line-numbers-type 'relative)

(defun +banner/emacsSplash ()
  (split-string (with-output-to-string
                  (call-process "~/.doom.d/extra/emacsSplashAux" nil standard-output nil))
                "\n" t))

(defun +banner/doom-banner ()
  (let ((point (point)))
    (mapc (lambda (line)
            (insert (propertize (+doom-dashboard--center +doom-dashboard--width line)
                                'face 'doom-dashboard-banner) " ")
            (insert "\n"))
          (+banner/emacsSplash))
    (insert (make-string (or (cdr +doom-dashboard-banner-padding) 0) ?\n))))

(setcar (nthcdr 0 +doom-dashboard-functions) #'+banner/doom-banner)

(set-frame-parameter (selected-frame) 'alpha '(90 . 50))
(add-to-list 'default-frame-alist '(alpha . (90 . 50)))

(use-package! org-bullets
  :hook (org-mode . org-bullets-mode))
(after! org
  (setq org-directory "~/org"
        org-hide-emphasis-markers t
        org-log-done 'time))

(setq +latex-viewers '(zathura))

(after! racket-mode
  (remove-hook! 'racket-mode-hook #'(racket-smart-open-bracket-mode)))

(+global-word-wrap-mode +1)

(setq mode-require-final-newline nil
      require-final-newline nil)

(after! org
  (setq org-latex-packages-alist '(("" "minted")))
  (setq org-latex-listings 'minted)
  (setq org-latex-pdf-process
        '("pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"
          "bibtex %b"
          "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"
          "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f")))

(setq auto-save-default nil
      create-lockfiles nil
      make-backup-files nil)

(map! (:leader
       (:map projectile-mode-map
        (:prefix ("p")
         :desc "Purge file from project" "P" #'projectile-purge-file-from-cache)
        (:prefix ("g")
         :desc "Magit push" "p" #'magit-push
         :desc "Magit stage all files" "a" #'magit-stage-modified)
        (:prefix ("W" . "wrap")
         :desc "()" "(" #'sp-wrap-round
         :desc "{}" "{" #'sp-wrap-curly
         :desc "[]" "[" #'sp-wrap-square)))
      (:localleader
       (:map (latex-mode-map LaTeX-mode-map)
        (:prefix ("c" . "code")
         :desc "Compile and show PDF" "c" #'TeX-command-run-all)
        (:prefix ("i" . "insert")
         :desc "Insert LaTeX environment" "e" #'LaTeX-environment
         :desc "Insert LaTeX item" "i" #'LaTeX-insert-item))
       (:map (haskell-mode-map)
        :desc "Refactor at point" "r" #'hlint-refactor-refactor-at-point
        :desc "Refactor buffer" "R" #'hlint-refactor-refactor-buffer)))
